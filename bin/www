#!/usr/bin/env node

/** Required Imports */
const http = require('http');
const app = require('./../app');

/**
 * @function
 * Initiating the server here
 */
function initiateServer() {
    
	const port = normalizePort(process.env.APP_PORT || '3001');
    /** setting port for the app */
    app.set('port', port);

    let server = null;
		
    switch (process.env.NODE_ENV) {
        case 'production':
            server = http.createServer(app); break;
        case 'development':
            server = http.createServer(app); break;
        default: server = http.createServer(app); break;
    }

    server.on('error', (err) => {
        onError(err, port);
    });

    server.on('listening', () => {
        onListening(server);
    });

    server.listen(port);

    
	function normalizePort(val) {
		const port = parseInt(val, 10)
		if (isNaN(port)) return val;
		if (port >= 0) return port;
		return false;
    }
    
    /**
     * Handling Error while starting Up server
     * @function onError
     * @param error 
     * @param port 
     */
    function onError(error, port) {
		if (error.syscall !== 'listen') {
			console.log(error);
		}
		let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
		// handle specific listen errors with friendly messages
		switch (error.code) {
			case 'EACCES':
				console.log(bind + ' requires elevated privileges. Error Code:' + error.code);
				break
			case 'EADDRINUSE':
				console.log(bind + ' is already in use. Error Code:' + error.code);
				break
			default:
				console.log(error)
		}

		throw error

	}

	/**
     * Handling Server Listening when server starts Up.
     * @function onListening
     * @param server 
     */
	function onListening(server) {
		console.log('Server Info:', server.address());
		console.log(`Server Started. Server running on ${process.env.APP_REST_PROTOCOL}://${process.env.APP_HOST}${process.env.APP_PORT ? ':'.concat(process.env.APP_PORT) : ''}`)
	}
}

/** Immediately Invoked Function for the Starting the Server */
(async function () {
	try {
		console.log('Connecting to DB');
		// await connectToDB();
		console.log('DB Connected');
		console.log('Starting Server');
		initiateServer();
	} catch (error) {
		process.exit(1)
	}
}());